<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>Andor Chen</title> <description>安道的个人网站</description><link>http://about.ac/</link> <atom:link href="http://about.ac/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Fri, 11 Sep 2015 15:27:05 +0000</pubDate> <lastBuildDate>Fri, 11 Sep 2015 15:27:05 +0000</lastBuildDate> <generator>Jekyll v2.5.3</generator> <item><title>渲染公式</title> <description>&lt;p&gt;昨天更新了《&lt;a href="http://railstutorial-china.org" title="Ruby on Rails 教程"&gt;Ruby on Rails 教程&lt;/a&gt;》，这次更新最大的变化是对公式的处理方式。这本书有一节用了几个公式，我使用的电子书工具链之前不支持转换公式，所以只能做些简单的处理：使用上下标。后来越看越不舒服，因此前几天抽空实现了 LaTex 式的显示效果。&lt;/p&gt;&lt;p&gt;公式一直是我的电子书工具链所缺乏的功能之一，我也一直想解决，不过苦于没有合适的方法。前几天，O’Reilly 电子书方面的负责人（Sanders Kleinfeld）分享了&lt;a href="http://diagramcenter.org/webinars.html#mmlc" title="他们的处理方式"&gt;他们的处理方式&lt;/a&gt;，勾起了我解决这个问题的欲望。&lt;/p&gt;&lt;p&gt;按照 Sanders 的分享，我首先尝试使用 &lt;a href="https://www.mathmlcloud.org/" title="MathML Cloud"&gt;MathML Cloud&lt;/a&gt;。不过这个服务提供的 API 不规范，尝试过程中多次遇到问题。这个服务的实现方式是&lt;a href="https://github.com/benetech/mmlc-api" title="开源"&gt;开源&lt;/a&gt;的，不过自己搭建很麻烦，又是 MongoDB，又是 Redis 的，所以我放弃了这个方案。&lt;/p&gt;&lt;p&gt;随后我试着搜索，看有没有纯 Ruby 的解决方案，毕竟我的工具链是使用 Ruby 编写的。在 GitHub 中搜索，找到了 &lt;a href="https://github.com/gjtorikian/mathematical" title="mathematical"&gt;mathematical&lt;/a&gt;。这个 gem 为了提升“速度”，用了两个 C 语言扩展。正是这两个扩展让我放弃使用这个 gem。因为用到了 C 扩展，所以安装之前要先安装一些库，不过对于“新手”来说，这个过程像念咒语一样，根本不得要领，开发者说安装什么跟着做就是了，然而有时跟着做也没用。环境的差异害死人！在这个 gem 开发者的帮助下，成功编译了 C 扩展，可是使用过程中又遇到了问题：无法生成 SVG 和 png 图像。自己尝试解决无果后，我就放弃了这个 gem。&lt;/p&gt;&lt;p&gt;这时，我又想起了 MathML Cloud，既然这个服务的实现方式是开源的，不妨看看它是如何渲染公式的。看了&lt;a href="https://github.com/benetech/mmlc-api/blob/1daa756cc68a2ab5b535410b3f968c9257e2400c/package.json#L26" title="代码"&gt;代码&lt;/a&gt;，发现 MathML Cloud 使用的是 &lt;a href="https://github.com/mathjax/MathJax-node" title="MathJax-node"&gt;MathJax-node&lt;/a&gt;。&lt;a href="https://www.mathjax.org/" title="MathJax"&gt;MathJax&lt;/a&gt; 应该是目前最成熟的公式解决方案，既然有 Node.js 版，集成到我的工具链中就不难了，因为 MathJax-node 提供了 CLI。经过一番编程之后，最终顺利把 MathJax-node 集成到我的工具链中。&lt;/p&gt;&lt;p&gt;目前我是这样处理公式的：书稿中使用 LaTex 句法写公式（纯文本，便于管理），生成电子书时为不同的电子书格式生成不同格式的图像&lt;/p&gt;&lt;ul&gt; &lt;li&gt;PDF 和 HTML 格式用 SVG&lt;/li&gt; &lt;li&gt;ePub 和 mobi 格式用 png&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;这么做遵循了“渐进增强”原则，因为 PDF 骨子里就是“矢量”的，最适合使用 SVG，而且目前大多数主流浏览器都支持 SVG，所以 HTML 格式也用了 SVG。但是 ePub 阅读器和 Kindle 等对 SVG 的支持并不好，只能使用图像；虽然缩放时的体验不好，但是至少还能辨识公式的内容。&lt;/p&gt;&lt;p&gt;P.S. 我的电子书工具链是 &lt;a href="https://rubygems.org/gems/persie" title="persie"&gt;persie&lt;/a&gt;。这个工具之前是开源的，现在已经闭源，不过以前的版本仍然可以下载安装。&lt;/p&gt; </description> <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/08/stem.html</link> <guid isPermaLink="true">http://about.ac/2015/08/stem.html</guid> <category>eBook</category> </item> <item><title>docx 文件脚注的编号</title> <description>&lt;p&gt;最近，使用 &lt;a href="http://pandoc.org/" title="pandoc"&gt;pandoc&lt;/a&gt; 生成 docx 文件遇到一个问题。默认情况下，一个文档中的所有脚注是按顺序标号的。这其实没什么问题，因为“语义”上讲，这就是正确的编号方法。但是，我想实现的是“按章”编号。&lt;/p&gt;&lt;p&gt;我之前已经从样式上区别了各章（方法参见《&lt;a href="/2015/06/docx-hack-guide.html" title="docx 文件定制指南"&gt;docx 文件定制指南&lt;/a&gt;》），即在一级标题之前换页。这只是“表面功夫”，Word 看到的仍是一个没有结构划分的文档。为了实现脚注按章编号，首先要想办法让 Word 知道每一章在哪里开始，在哪里结束，也就是从“语义”上实现分章。&lt;/p&gt;&lt;p&gt;其实 Word 提供了这种功能——分节。不过在代码层级，实现起来有点复杂。根据 WordProcessingML 的定义，文档最后一节的相关属性在 &lt;code class="highlighter-rouge"&gt;w:body&lt;/code&gt; 元素中最后一个 &lt;code class="highlighter-rouge"&gt;w:sectPr&lt;/code&gt; 元素中定义，而之前每一节的相关属性都在各节最后一个段落（&lt;code class="highlighter-rouge"&gt;w:p&lt;/code&gt;）的属性中定义，如下述代码所示：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;w:body&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!--第一节--&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:pPr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:sectPr&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:sectPr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/w:pPr&amp;gt;&lt;/span&gt; ... &lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--第二节--&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:pPr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:sectPr&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:sectPr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/w:pPr&amp;gt;&lt;/span&gt; ... &lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--最后一节--&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/w:p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:sectPr&amp;gt;&lt;/span&gt; ... &lt;span class="nt"&gt;&amp;lt;/w:sectPr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/w:body&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;pandoc 所用的模板没有为最后一节指定任何属性，即只有 &lt;code class="highlighter-rouge"&gt;&amp;lt;w:sectPr/&amp;gt;&lt;/code&gt;。所以，要想办法设置最后一节的属性，还要在每个一级标题之前的段落属性里插入 &lt;code class="highlighter-rouge"&gt;&amp;lt;w:sectPr&amp;gt;&lt;/code&gt; 元素。这个好办，使用相关的 XML 处理库就行。如果使用 Ruby，可以用 &lt;a href="https://rubygems.org/gems/nokogiri" title="nokogiri"&gt;nokogiri&lt;/a&gt;。XML 的具体处理方法本文不再赘述。&lt;/p&gt;&lt;p&gt;不过，要如何设置每一节的属性才能让脚注按章编号呢？按照 WordProcessingML 的定义，脚注的属性放在 &lt;code class="highlighter-rouge"&gt;w:footnotePr&lt;/code&gt; 元素中，控制编号方式的是 &lt;code class="highlighter-rouge"&gt;w:numRestart&lt;/code&gt; 元素。这个元素的值可以设为下述三个值中的一个：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;continuous&lt;/code&gt;（默认值）&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;eachSect&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;eachPage&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;从上可以看出，我们需要把这个元素的值设为 &lt;code class="highlighter-rouge"&gt;eachSect&lt;/code&gt;，即开始新的一节时重新从头开始为脚注编号。最终设置的 &lt;code class="highlighter-rouge"&gt;w:sectPr&lt;/code&gt; 如下：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;w:sectPr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:footnotePr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;w:numRestart&lt;/span&gt; &lt;span class="na"&gt;w:val=&lt;/span&gt;&lt;span class="s"&gt;"eachSect"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/w:footnotePr&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/w:sectPr&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;如果想每页单独编号，可以把 &lt;code class="highlighter-rouge"&gt;w:numRestart&lt;/code&gt; 的值设为 &lt;code class="highlighter-rouge"&gt;eachPage&lt;/code&gt;。&lt;/p&gt; </description> <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/08/docx-footnotes-numbering.html</link> <guid isPermaLink="true">http://about.ac/2015/08/docx-footnotes-numbering.html</guid> <category>Dev</category> </item> <item><title>翻译时对网址的处理</title> <description>&lt;p&gt;科技类书籍一般都会在文中使用链接，电子书排版时可以直接以“链接”的形式给出，但是出版纸质书时则要把链接的地址写入行间。这就牵涉到排版的问题，为了便于排版，节省空间，较长的网址一般会使用短网址形式给出。外文书经常使用的短网址服务是 bit.ly。众所周知，这个网站在国内是无法访问的，因此翻译时要做些处理。&lt;/p&gt;&lt;p&gt;我目前的做法是，找到 bit.ly 短网址对应的原网址，然后使用国内的短网址服务（例如 dwz.cn）重新创建短网址。但是这么做也会遇到一些问题。例如，有些网址包含特定的“词”，国内的短网址服务拒绝提供服务。遇到这种情况，我一般直接给出原地址。还有一种常见的问题是，原网址本身也无法访问。至于无法访问的原因，无外乎三种：其一，原网址由于某些原因在国内无法访问；其二，原网址对应的页面已经不存在；其三，原网址对应的页面换用了其他网址。&lt;/p&gt;&lt;p&gt;对第一类网址来说，比较好的方式是，转载原文，放到国内用户能访问的网站中。不过，这又会带来一些问题，比如说，版权问题，工作量问题。所以，遇到这类网址，目前我不会做任何处理，祈求读者有科学上网的途径。对第二类网址来说，可以使用网页缓存服务，例如 &lt;a href="https://archive.org" title="https://archive.org"&gt;https://archive.org&lt;/a&gt;。对第三类网址来说，建议找出新地址。有人可能觉得这么做“不忠于原文”，但要知道，翻译是“再创作”，创作的基础虽然是原文，但原文是有“时限”的。在这方面，计算机技术表现的最为突出，正所谓“出版就过时”，有时甚至更糟，“写着后文，前文就过时了”。翻译时，时间已经向后推移了，为了给读者提供翻译当下最正确的资讯，当然要使用最新的网址。&lt;/p&gt;</description> <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/07/translate-urls.html</link> <guid isPermaLink="true">http://about.ac/2015/07/translate-urls.html</guid> <category>Translation</category> </item> <item><title>docx 文件定制指南</title> <description>&lt;p&gt;我在“&lt;a href="/2015/05/apps-for-translator.html" title="翻译时使用的应用"&gt;翻译时使用的应用&lt;/a&gt;”一文中提到，因为最近翻译的一本书要求提供 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件，所以我第一次使用了 &lt;a href="http://pandoc.org/" title="pandoc"&gt;pandoc&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;Pandoc 是个很强大的工具，能在多种文件格式之间相互转换。不过，我使用 Pandoc 只是为了把 Markdown 文件转换成 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件，以便提供给出版社。Pandoc 能很好地完成这项工作，不过转换得到的 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件格式不符合我的要求，所以最近几天稍微研究了定制样式的问题。&lt;/p&gt;&lt;h2&gt;&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 格式简介&lt;/h2&gt;&lt;p&gt;&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 是微软为 Word 软件开发的文件格式，其背后是一个国际标准——&lt;a href="http://officeopenxml.com/" title="Office Open XML"&gt;Office Open XML&lt;/a&gt;（简称 OOXML）。&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 其实是打包文件，把扩展名从 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 改为 &lt;code class="highlighter-rouge"&gt;zip&lt;/code&gt; 就能使用解压软件打开，看到其中的内容。解压后的文件结构如下所示：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;. ├── [Content_Types].xml ├── _rels ├── docProps │   ├── app.xml │   └── core.xml └── word ├── _rels │   ├── document.xml.rels │   └── footnotes.xml.rels ├── document.xml ├── fontTable.xml ├── footnotes.xml ├── media ├── numbering.xml ├── settings.xml ├── styles.xml ├── theme │   └── theme1.xml └── webSettings.xml &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;可以看出，大多数都是 XML 文件。我们主要关注其中三个文件：&lt;code class="highlighter-rouge"&gt;word/document.xml&lt;/code&gt;，&lt;code class="highlighter-rouge"&gt;word/styles.xml&lt;/code&gt; 和 &lt;code class="highlighter-rouge"&gt;word/fontTable.xml&lt;/code&gt;。&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;document.xml&lt;/code&gt;：&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件的内容&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;styles.xml&lt;/code&gt;：&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件的样式&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;fontTable.xml&lt;/code&gt;：&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件用到的的字体&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件基本上做到了表现和内容分离。&lt;code class="highlighter-rouge"&gt;document.xml&lt;/code&gt; 和 &lt;code class="highlighter-rouge"&gt;styles.xml&lt;/code&gt; 可以比作 Web 中的 HTML 和 CSS。定制样式时，我们基本上不用修改内容，也就是 &lt;code class="highlighter-rouge"&gt;document.xml&lt;/code&gt; 文件。下面着重介绍 &lt;code class="highlighter-rouge"&gt;styles.xml&lt;/code&gt; 文件。&lt;/p&gt;&lt;p&gt;&lt;code class="highlighter-rouge"&gt;styles.xml&lt;/code&gt; 文件的作用相当于 Web 中的 CSS，只不过这是 XML 文件，而且也不使用 CSS 规则定义样式。下面是一个样式示例：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;lt;w:style w:styleId="BodyText" w:type="paragraph"&amp;gt; &amp;lt;w:name w:val="Body Text"/&amp;gt; &amp;lt;w:basedOn w:val="Normal"/&amp;gt; &amp;lt;w:link w:val="BodyTextChar"/&amp;gt; &amp;lt;w:pPr&amp;gt; &amp;lt;w:spacing w:after="180" w:before="180"/&amp;gt; &amp;lt;/w:pPr&amp;gt; &amp;lt;w:rPr&amp;gt; &amp;lt;w:rFonts w:ascii="Arial" w:cstheme="majorBidi" w:eastAsia="黑体" w:hAnsiTheme="majorHAnsi"/&amp;gt; &amp;lt;w:sz w:val="36"/&amp;gt; &amp;lt;/w:rPr&amp;gt; &amp;lt;/w:style&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;&lt;code class="highlighter-rouge"&gt;w:styleId&lt;/code&gt; 属性的值是内部 ID，&lt;code class="highlighter-rouge"&gt;document.xml&lt;/code&gt; 文件中的结构需要什么样式，就引用这个 ID 的值，就像是 CSS 中的选择符一样。&lt;code class="highlighter-rouge"&gt;w:type&lt;/code&gt; 属性是样式的类型，一般只会用到 &lt;code class="highlighter-rouge"&gt;paragraph&lt;/code&gt;、&lt;code class="highlighter-rouge"&gt;character&lt;/code&gt; 和 &lt;code class="highlighter-rouge"&gt;table&lt;/code&gt;。&lt;code class="highlighter-rouge"&gt;w:name&lt;/code&gt; 元素中 &lt;code class="highlighter-rouge"&gt;w:val&lt;/code&gt; 属性的值是这个样式在 GUI 应用（Word，Pages 或 OpenOffice 等）中显示的名称。&lt;code class="highlighter-rouge"&gt;w:basedOn&lt;/code&gt; 元素中 &lt;code class="highlighter-rouge"&gt;w:val&lt;/code&gt; 的值是这个样式继承的其他样式 ID；这个元素很重要，用于实现块级元素的样式继承。&lt;code class="highlighter-rouge"&gt;w:link&lt;/code&gt; 元素中 &lt;code class="highlighter-rouge"&gt;w:val&lt;/code&gt; 的值也是这个样式继承的其他样式 ID，不过这个元素继承的是行内元素的样式。&lt;code class="highlighter-rouge"&gt;w:pPr&lt;/code&gt; 元素设定的是段落样式，其中 &lt;code class="highlighter-rouge"&gt;w:spacing&lt;/code&gt; 元素用于设置段前和段后距离，单位是二十分之一英寸。&lt;code class="highlighter-rouge"&gt;w:rPr&lt;/code&gt; 元素用于设置段落中行内元素的样式，其中 &lt;code class="highlighter-rouge"&gt;w:rFonts&lt;/code&gt; 元素用于设置字体（可以分别设置中西文字体），&lt;code class="highlighter-rouge"&gt;w:sz&lt;/code&gt; 元素用于设置字号，单位是二分之一点（pt）。&lt;/p&gt;&lt;p&gt;&lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件的样式规则乍看起来很复杂，其实也比较易于理解。我想真正让人觉得难懂的，是 XML 结构。虽然如此，我还是不建议直接手写样式。你可以先在 Word 中通过 GUI 创建样式，然后解压 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件，修改样式，或者把样式复制出来，方便以后重用。&lt;/p&gt;&lt;p&gt;另一个可能需要修改的文件是 &lt;code class="highlighter-rouge"&gt;fontTable.xml&lt;/code&gt;。这个文件定义 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件中用到的所有字体。下面是一个字体定义示例：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;lt;w:font w:name="宋体"&amp;gt; &amp;lt;w:altName w:val="SimSun"/&amp;gt; &amp;lt;w:panose1 w:val="02010600030101010101"/&amp;gt; &amp;lt;w:charset w:val="86"/&amp;gt; &amp;lt;w:family w:val="auto"/&amp;gt; &amp;lt;w:pitch w:val="variable"/&amp;gt; &amp;lt;w:sig w:csb0="00040001" w:csb1="00000000" w:usb0="00000003" w:usb1="080E0000" w:usb2="00000010" w:usb3="00000000"/&amp;gt; &amp;lt;/w:font&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;字体的定义看起来比样式简单，其实有很多属性的值是使用某种机制生成的，例如 &lt;code class="highlighter-rouge"&gt;w:panose1&lt;/code&gt; 元素的 &lt;code class="highlighter-rouge"&gt;w:val&lt;/code&gt; 属性，因此不要自己动手编写。同样，也是先在 Word 中定义好，然后将其复制出来。&lt;/p&gt;&lt;h2&gt;定制方式&lt;/h2&gt;&lt;p&gt;如果只需要定制 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件的样式，可以准备好 &lt;code class="highlighter-rouge"&gt;styles.xml&lt;/code&gt; 和 &lt;code class="highlighter-rouge"&gt;fontTable.xml&lt;/code&gt; 文件，然后替换掉 Pandoc 生成的 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件中的这两个文件。例如，在命令行中可以执行下述命令替换：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;zip -r sample.docx word/styles.xml word/fontTable.xml &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;下面举个定义样式的例子。在一本书中，每一章一般都新起一页，而不是和前一章的内容连在一起。也就是说，新的一章要换页。在 OOXML 中，换页主要由两种方式，这里我们要使用 &lt;code class="highlighter-rouge"&gt;w:pageBreakBefore&lt;/code&gt; 元素。后面再介绍另一种方式。按照 Pandoc 的生成方式，一章的标题一般是一级标题，所以我们可以在一级标题的样式中加入 &lt;code class="highlighter-rouge"&gt;w:pageBreakBefore&lt;/code&gt; 元素，在一级标题之前换页，如下所示：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&amp;lt;w:style w:styleId="Heading1" w:type="paragraph"&amp;gt; &amp;lt;w:name w:val="Heading 1"/&amp;gt; &amp;lt;w:pPr&amp;gt; &amp;lt;w:pageBreakBefore/&amp;gt; &amp;lt;/w:pPr&amp;gt; &amp;lt;/w:style&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;加入这个样式后，在 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件的每个一级标题之前都会换页。&lt;/p&gt;&lt;h2&gt;过滤器&lt;/h2&gt;&lt;p&gt;有时我们需要手动强制换页，这时该怎么做呢？答案是使用&lt;a href="http://pandoc.org/scripting.html" title="过滤器"&gt;过滤器&lt;/a&gt;。Pandoc 提供了强大的过滤器机制，方便使用者定制。Pandoc 转换文件的过程如下所示：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt; pandoc filter pandoc source --------&amp;gt; JSON --------&amp;gt; JSON --------&amp;gt; target &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;因此，我们可以使用过滤器修改 Pandoc 生成的 JSON 中间格式。Pandoc 的过滤器有 &lt;a href="http://github.com/jgm/pandocfilters" title="Python API"&gt;Python API&lt;/a&gt;、&lt;a href="https://github.com/vinai/pandocfilters-php" title="PHP API"&gt;PHP API&lt;/a&gt; 和 &lt;a href="https://github.com/mvhenderson/pandoc-filter-node" title="Node/JavaScript API"&gt;Node/JavaScript API&lt;/a&gt;。不过我对这些语言都不熟悉，所以自己写了一个“简陋”的 &lt;a href="https://gist.github.com/AndorChen/a07c591fed685fb7a80c" title="Ruby API"&gt;Ruby API&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;下面说明怎么使用过滤器实现手动换页。假设我们在 Markdown 文件中输入 &lt;code class="highlighter-rouge"&gt;&amp;lt;!--PAGEBREAK--&amp;gt;&lt;/code&gt; 时是想换页。&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pandocfilter'&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'RawBlock'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;!--PAGEBREAK--&amp;gt;'&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%(&amp;lt;w:p&amp;gt;&amp;lt;w:r&amp;gt;&amp;lt;w:br w:type="page"/&amp;gt;&amp;lt;/w:r&amp;gt;&amp;lt;/w:p&amp;gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;PandocFilter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;raw_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'openxml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="no"&gt;PandocFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;在这个过滤器中，我们把 &lt;code class="highlighter-rouge"&gt;&amp;lt;!--PAGEBREAK--&amp;gt;&lt;/code&gt; 替换成 OOXML 格式的元素（&lt;code class="highlighter-rouge"&gt;raw_block&lt;/code&gt; 方法创建的是 &lt;a href="http://hackage.haskell.org/package/pandoc-types-1.12.4.3/docs/Text-Pandoc-Definition.html#v:RawBlock" title="&amp;lt;code class=&amp;quot;highlighter-rouge&amp;quot;&amp;gt;RawBlock&amp;lt;/code&amp;gt; 元素"&gt;&lt;code class="highlighter-rouge"&gt;RawBlock&lt;/code&gt; 元素&lt;/a&gt;）。这个元素表示一个段落，但没有内容。换页的关键是 &lt;code class="highlighter-rouge"&gt;w:br&lt;/code&gt; 元素，当 &lt;code class="highlighter-rouge"&gt;w:type&lt;/code&gt; 属性的值为 &lt;code class="highlighter-rouge"&gt;page&lt;/code&gt; 时表示换页。&lt;/p&gt;&lt;p&gt;除了前面举的几个例子之外，我还做了其他定制，这里就不再一一介绍了。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;虽然我现在基本上实现了所需的 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 文件样式，但使用 Markdown + Pandoc 的方式还是让我觉得别扭。Pandoc 虽然很强大，相对也易于定制，但是 Markdown 有其局限性。Markdown 是为了在 Web 中快速书写而创造的，不是为了写书稿。写书稿首选当然是 &lt;a href="http://www.methods.co.nz/asciidoc/" title="AsciiDoc"&gt;AsciiDoc&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;如果有时间的话，我会开发一个 AsciiDoc 到 &lt;code class="highlighter-rouge"&gt;docx&lt;/code&gt; 的转换程序。当然，这是一个愿景，要知道，&lt;a href="http://www.ecma-international.org/publications/standards/Ecma-376.htm" title="OOXML 规范"&gt;OOXML 规范&lt;/a&gt;（ECMA-376）可是超过五千页啊。&lt;/p&gt; </description> <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/06/docx-hack-guide.html</link> <guid isPermaLink="true">http://about.ac/2015/06/docx-hack-guide.html</guid> <category>Dev</category> </item> <item><title>翻译时使用的应用</title> <description>&lt;p&gt;我的工作电脑是台 MacBook Pro。因此，本文提到的都是 OS X 系统中的应用。本文介绍我在翻译时使用的应用。我选择应用时会使用以下标准：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;首选系统内置的应用&lt;/li&gt; &lt;li&gt;优先选择免费开源的工具&lt;/li&gt; &lt;li&gt;使用收费软件的精简免费版&lt;/li&gt; &lt;li&gt;迫不得已，再使用收费软件&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Terminal.app (bash)&lt;/h2&gt;&lt;p&gt;我的翻译流程基本上是都在命令行中完成，包括创建项目、推送 Git 仓库和提取 PDF 文件中的图像等。我习惯使用系统自带的终端，而且使用的 shell 是 bash。对日常操作来说，bash 足够了，因此我没有使用功能更强的 &lt;a href="http://www.zsh.org" title="zsh 的网站"&gt;zsh&lt;/a&gt; 或 &lt;a href="http://tmux.sourceforge.net/" title="tmux 项目的网站"&gt;tmux&lt;/a&gt; 等。&lt;/p&gt;&lt;h2&gt;Git&lt;/h2&gt;&lt;p&gt;我在命令行中最常执行的是 Git 相关的操作，因为我会为每个翻译项目创建 Git 仓库，并在远程仓库（BitBucket）中备份。我的 Git 使用 &lt;a href="http://brew.sh" title="homebrew 的网站"&gt;homebrew&lt;/a&gt; 管理和更新。&lt;/p&gt;&lt;h2&gt;Sublime Text&lt;/h2&gt;&lt;p&gt;翻译时，我都使用纯文本格式撰写译稿，最常使用 &lt;a href="http://daringfireball.net/projects/markdown/" title="Markdown 的网站"&gt;Markdown&lt;/a&gt;，但是如果可能，我会尽量使用 &lt;a href="http://www.methods.co.nz/asciidoc/" title="AsciiDoc 的网站"&gt;AsciiDoc&lt;/a&gt;（转换时使用 &lt;a href="http://asciidoctor.org" title="Asciidoctor 的网站"&gt;Asciidoctor&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;既然是纯文本，一个简单易用的文本编辑器就足够了。我最常使用的文本编辑器是 &lt;a href="www.sublimetext.com" title="Sublime Text"&gt;Sublime Text&lt;/a&gt;。我从不使用专门的 Markdown 编辑器，例如 &lt;a href="http://25.io/mou/" title="Mou 的网站"&gt;Mou&lt;/a&gt; 或 &lt;a href="http://marked2app.com" title="Marked 的网站"&gt;Marked&lt;/a&gt; 等。因为专门的 Markdown 编辑器不支持某些出版社特有的句法，而且我觉得自己并不需要这些应用提供的功能（比如实时预览），所以能不多安装一个应用就不安装。&lt;/p&gt;&lt;h2&gt;Preview.app&lt;/h2&gt;&lt;p&gt;很多时候，出版社只会提供原书的 PDF 文档，所以需要一个查看 PDF 的应用。一般情况下我会使用系统内置的 Preview.app，如果需要同时打开多个 PDF 文件（需要标签页功能），我会使用 &lt;a href="https://itunes.apple.com/us/app/pdf-reader-x/id684812309" title="购买 PDF Reader X"&gt;PDF Reader X&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;xpdf (pdfimages)&lt;/h2&gt;&lt;p&gt;&lt;a href="http://www.foolabs.com/xpdf/" title="xpdf 的网站"&gt;xpdf&lt;/a&gt; 包含多个用于处理 PDF 文件的命令行工具：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;pdfinfo&lt;/code&gt;：查看 PDF 的元信息&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;pdffonts&lt;/code&gt;：查看 PDF 文件中使用的字体&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;pdfdetach&lt;/code&gt;：提取 PDF 文件的附件&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;pdftoppm&lt;/code&gt;：把 PDF 文件转换成 &lt;code class="highlighter-rouge"&gt;ppm&lt;/code&gt; 格式的图像&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;pdfimages&lt;/code&gt;：提取 PDF 文件中的图像&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;我最常使用 &lt;code class="highlighter-rouge"&gt;pdfimages&lt;/code&gt;，把 PDF 文件中的图像提取出来（因为多数时候，出版社只会提供原书的 PDF 文档，不会提供原始文稿和图像）。Adobe Acrobat 也可以提取图像，不过这是收费应用。注意，&lt;code class="highlighter-rouge"&gt;pdfimages&lt;/code&gt; 提取出来的图像是 &lt;code class="highlighter-rouge"&gt;ppm&lt;/code&gt; 格式，需要转换成常见的图像格式（例如 &lt;code class="highlighter-rouge"&gt;jpg&lt;/code&gt; 或 &lt;code class="highlighter-rouge"&gt;png&lt;/code&gt;）。&lt;/p&gt;&lt;h2&gt;ToyViewer.app&lt;/h2&gt;&lt;p&gt;&lt;a href="https://itunes.apple.com/en/app/toyviewer/id414298354" title="购买 ToyViewer"&gt;ToyViewer&lt;/a&gt; 是免费的图像查看应用，支持的格式很多。我主要使用这个应用把 &lt;code class="highlighter-rouge"&gt;pdfimages&lt;/code&gt; 从 PDF 文件中提取出来的 &lt;code class="highlighter-rouge"&gt;ppm&lt;/code&gt; 格式图像转换成 &lt;code class="highlighter-rouge"&gt;jpg&lt;/code&gt; 格式。&lt;/p&gt;&lt;p&gt;如果选择命令行工具，可以使用 &lt;a href="http://www.imagemagick.org/" title="ImageMagick 的网站"&gt;ImageMagick&lt;/a&gt;。不过我在使用 ImageMagick 时一直遇到问题，所以暂且使用 GUI 应用代替。有时间再解决这个问题。&lt;/p&gt;&lt;h2&gt;pandoc&lt;/h2&gt;&lt;p&gt;我一直没用到 &lt;a href="http://pandoc.org/" title="pandoc 的网站"&gt;pandoc&lt;/a&gt;，直到最近，一个出版社要求提供 &lt;code class="highlighter-rouge"&gt;doc&lt;/code&gt; 文档，我才第一次使用 pandoc。我之所以不使用这个工具，其中一个原因是，这个工具是使用 &lt;a href="https://www.haskell.org/" title="Haskell 语言的网站"&gt;Haskell 语言&lt;/a&gt;开发的。&lt;/p&gt;&lt;p&gt;pandoc 是个命令行工具，作用是在 Markdown 和多种格式之间转换，其中就包含把 Markdown 转换成 &lt;code class="highlighter-rouge"&gt;doc&lt;/code&gt; 格式。因为 pandoc 是使用 Haskell 语言开发的，虽然提供了很多其他语言的 API，但扩展起来依然很难。目前，我只使用 pandoc 内置的格式创建 &lt;code class="highlighter-rouge"&gt;doc&lt;/code&gt; 文档。&lt;/p&gt;&lt;h2&gt;persie&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/AndorChen/persie" title="persie 在 GitHub 中的仓库"&gt;persie&lt;/a&gt; 是我自己开发的一个命令行工具，用于把 AsciiDoc 格式编写的文稿转换成电子书。persie 使用以下三个工具生成电子书：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="http://www.princexml.com/" title="PrinceXML 的网站"&gt;PrinceXML&lt;/a&gt;：生成 PDF 格式电子书。PrinceXML 最大的优势是，使用 CSS 定义 PDF 文件的格式。这是个收费软件，不过有免费试用版，而且可以终生使用（不过会在 PDF 文件的第一页加一个 LOGO，但很容易去掉）。&lt;/li&gt; &lt;li&gt;&lt;a href="https://rubygems.org/gems/gepub" title="gepub"&gt;gepub&lt;/a&gt;：生成 ePub 格式电子书。这是个 Ruby gem。&lt;/li&gt; &lt;li&gt;&lt;a href="http://www.amazon.com/gp/feature.html?docId=1000765211" title="KindleGen 的网站"&gt;KindleGen&lt;/a&gt;：生成 mobi 格式电子书。这是 Amazon 提供的工具，部分国家或地区无法下载（需要科学上网）。&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;我翻译的《&lt;a href="http://railstutorial-china.org" title="Ruby on Rails 教程的网站"&gt;Ruby on Rails 教程&lt;/a&gt;》和自己写的《&lt;a href="https://selfstore.io/products/184/" title="购买 Jekyll 小书"&gt;Jekyll 小书&lt;/a&gt;》都是使用 persie 制作的电子书。&lt;/p&gt;&lt;h2&gt;Dictionary.app / Youdao.app&lt;/h2&gt;&lt;p&gt;翻译时免不了要查字典，我使用的字典类应用有两个：Dictionary.app 和 Youdao.app。Dictionary 主要用于管理术语，我会把每本书中用到的术语制成词典，这样方便以后查找。除此之外，我还把&lt;a href="http://www.microsoft.com/Language/zh-cn/Terminology.aspx" title="下载微软的术语库"&gt;微软的术语词库&lt;/a&gt;制成了词典。&lt;/p&gt;&lt;p&gt;制作词典的方法有两种：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;使用 Auxiliary Tools。这是 Apple 提供的命令行工具，旧版 OS X 中内置，新版系统要到开发者网站中下载。&lt;/li&gt; &lt;li&gt;使用 &lt;a href="https://code.google.com/p/mac-dictionary-kit/" title="Mac Dictionary Kit"&gt;DictUnifier.app&lt;/a&gt;。这是 GUI 应用，用于转换 stardict 的词典，以便在 Dictionary.app 中使用。&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Sparrow.app&lt;/h2&gt;&lt;p&gt;Sparrow 被 Google 收购后虽然销声匿迹了，但我觉得它仍然是 OS X 中最好用的邮件客户端。&lt;/p&gt;&lt;p&gt;翻译时经常需要与出版社或原作者联系，因此有必要使用一个顺手的邮件客户端。&lt;/p&gt;</description> <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/05/apps-for-translator.html</link> <guid isPermaLink="true">http://about.ac/2015/05/apps-for-translator.html</guid> <category>Translation</category> </item> <item><title>第一个 Mac APP</title> <description>&lt;p&gt;在译完一本书之后，我习惯休息几天，清空对上一本书的记忆，为翻译下一本书做好准备。昨天提交了过去两个月翻译的一本书，本准备好好休息一下，可以今早六点醒了之后就睡不着了。在网上闲逛了大半天，下午决定为自己的一个需求开发一个 Mac APP。&lt;/p&gt;&lt;p&gt;其实这个 APP 计划很久了，只是一直没动手。我给出版社翻译的书，出版之后出版社会赠送几本（一般是五本）样书给我，我自己会留一本作纪念，剩下则免费送给网友（比如&lt;a href="https://v2ex.com/t/149111" title="Python 网络编程攻略"&gt;这本&lt;/a&gt;和&lt;a href="https://v2ex.com/t/155524" title="Flask Web 开发"&gt;这本&lt;/a&gt;）。如果你看了这两个送书的帖子会发现，我之前使用的赠送规则是有缺陷的：一本的规则是先到先得，一本的规则是根据彩票开奖结果匹配楼层数。这两种赠送规则都会打击用户的参与积极性，要不来晚了就没了，要不只有一定范围内的楼层有效。所以我想开发的就是一个简单的“抽奖”程序。&lt;/p&gt;&lt;p&gt;这类程序实现起来不难，我之前用过 JavaScript 实现的“抽奖”程序。不过因为我最近对 Mac APP 开发比较感兴趣，所以决定自己动手写一个类似的程序。我规划的 UI 及操作流程是这样的：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;打开应用后，界面中显示一个标签和一个按钮&lt;/li&gt; &lt;li&gt;标签用于显示“抽奖”的主题&lt;/li&gt; &lt;li&gt;点击按钮后开始抽奖&lt;/li&gt; &lt;li&gt;抽奖结束后弹出一个窗口，显示抽奖结果&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;在编写样板代码阶段，一切顺利，毕竟样板代码写了很多次，而且基本都一样。可是实现具体功能时却遇到了几个问题。&lt;/p&gt;&lt;ul&gt; &lt;li&gt;如何从数组中随机选取元素&lt;/li&gt; &lt;li&gt;如何实现延时操作&lt;/li&gt; &lt;li&gt;如何弹出窗口&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;随机选取元素涉及到生成随机数，要使用 &lt;code class="highlighter-rouge"&gt;arc4random_uniform()&lt;/code&gt; 函数，还要做些类型转换。这一点我在以前看过的 iOS 视频教程中就知道了，可是记不住该怎么转换类型。熟悉 Ruby 语言的开发者大概都知道，在 Ruby 中 &lt;code class="highlighter-rouge"&gt;Array&lt;/code&gt; 类有个 &lt;code class="highlighter-rouge"&gt;#sample&lt;/code&gt; 方法，用于从数组中随机选取元素。如果在 Swift 中也能这么做就好了。这时我想起了之前在 GitHub 中关注的一个项目——&lt;a href="https://github.com/pNre/ExSwift" title="ExSwift"&gt;ExSwift&lt;/a&gt;。ExSwift 对 Swift 的原生类型做了很多扩展，实现了大量 Ruby 和 Rails 中的实用方法。很巧，ExSwift 也在 &lt;code class="highlighter-rouge"&gt;Array&lt;/code&gt; 类上实现了 &lt;code class="highlighter-rouge"&gt;sample()&lt;/code&gt; 方法（&lt;a href="https://github.com/pNre/ExSwift/blob/f1411fc6320a053afca00ef975648c975a30ca75/ExSwift/Array.swift#L407-420" title="代码"&gt;代码&lt;/a&gt;）。这样第一个问题解决了——找到了从数组中随机选取元素的方式。&lt;/p&gt;&lt;p&gt;下面是第二个问题。我之所以想实现延迟，是因为这个应用的功能太简单，运行的很快，就像没运行一样。为了让它看起来在背后做了很多事情，我想让结果等待一段时间再出现（在弹出窗口中）。可是怎么实现延迟呢？我首先想到的是“sleep”。可是 &lt;code class="highlighter-rouge"&gt;sleep()&lt;/code&gt; 函数和 &lt;code class="highlighter-rouge"&gt;NSThread. sleepForTimeInterval(_:)&lt;/code&gt; 方法都会导致 UI 无响应，就像假死一样。经过一番搜索之后，我知道这种效果应该使用 &lt;code class="highlighter-rouge"&gt;dispatch_after(_:_:_:)&lt;/code&gt; 函数实现。现在还剩最后一个问题了。&lt;/p&gt;&lt;p&gt;我前面一直在用“弹出”这个词，因为我以为我要实现的效果是“pop-up”。可是搜了好久都没找到相关的 API，最后才发现应该使用“提醒”（&lt;code class="highlighter-rouge"&gt;NSAlert&lt;/code&gt;）。不过在使用 &lt;code class="highlighter-rouge"&gt;beginSheetModalForWindow(_:completionHandler:)&lt;/code&gt; 方法时，处理回调用了很长时间。这体现了我对 Swift 语言（尤其是闭包）的理解还很浅显。&lt;/p&gt;&lt;p&gt;大概用了三个小时，期间不断地搜索、查 API 文档和纠错，最终这个应用总算实现了规划的功能，顺利运行起来了。&lt;/p&gt;&lt;figure class="text-center"&gt; &lt;img src="/assets/images/figures/LuckyMan.png" alt="LuckyMan" /&gt; &lt;figcaption&gt;LuckyMan&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;这是我自己规划功能、自己动手开发的第一个 Mac APP，因此特写此文，以作纪念。在开发的过程中，我学到了：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Swift 语言是基础&lt;/li&gt; &lt;li&gt;大部分工作是要熟悉 Cocoa API&lt;/li&gt; &lt;li&gt;Dash 买得值&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;我想，再过一段时间这个应用就能派上用场了。&lt;/p&gt; </description> <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/05/first-mac-app.html</link> <guid isPermaLink="true">http://about.ac/2015/05/first-mac-app.html</guid> <category>Dev</category> </item> <item><title>O'Reilly 电子书在多看中没有目录的修正方法</title> <description>&lt;p&gt;我平时看电子书，尤其是 ePub 格式的电子书，喜欢使用多看，包括我的 Kindle，也刷成了多看的系统。我看的电子书中相当一部分是 O’Reilly 出版社的。但在多看的系统中，O’Reilly 出版社的电子书都没有目录。如果只有一两本是这种情况，有可能是 O’Reilly 的问题。可是，我接触到的所有O’Reilly 出版社的电子书都是如此，所以我猜想可能是多看系统的问题。&lt;/p&gt;&lt;p&gt;鉴于此，我在其他几个 ePub 阅读器中做了测试，包括 iBooks（Mac 和 iPhone）和 Adobe Digital Editions。在这些阅读器中，O’Reilly 出版社的电子书都能正确显示目录。我还使用 &lt;a href="https://github.com/idpf/epubcheck" title="epubcheck"&gt;epubcheck&lt;/a&gt; 对 O’Reilly 的电子书做了验证，结果是，完全没问题。&lt;/p&gt;&lt;p&gt;今天，我仔细研究了一下，发现在 O’Reilly 的电子书中，&lt;a href="http://www.idpf.org/epub/20/spec/OPF_2.0.1_draft.htm#Section2.4.1" title="&amp;lt;code class=&amp;quot;highlighter-rouge&amp;quot;&amp;gt;toc.ncx&amp;lt;/code&amp;gt; 文件"&gt;&lt;code class="highlighter-rouge"&gt;toc.ncx&lt;/code&gt; 文件&lt;/a&gt;中“缺少”一个 &lt;code class="highlighter-rouge"&gt;meta&lt;/code&gt; 元素：&lt;a href="http://www.niso.org/workrooms/daisy/Z39-86-2005.html#li_406" title="&amp;lt;code class=&amp;quot;highlighter-rouge&amp;quot;&amp;gt;dtb:depth&amp;lt;/code&amp;gt;"&gt;&lt;code class="highlighter-rouge"&gt;dtb:depth&lt;/code&gt;&lt;/a&gt;。我把”缺少“放在了引号中，因为没有这个元素，epubcheck 并没有报错，说明 ePub 规范并不强制要求必须有这个元素。而且，虽然没有这个元素，很多其他 ePub 阅读器都能正确解析目录。所以，多看没有显示目录的原因，我想应该是兼容性不够强。&lt;/p&gt;&lt;p&gt;我在 &lt;code class="highlighter-rouge"&gt;toc.ncx&lt;/code&gt; 文件中加上了这个 &lt;code class="highlighter-rouge"&gt;meta&lt;/code&gt; 元素：&lt;code class="highlighter-rouge"&gt;&amp;lt;meta name="dtb:depth" content="1"/&amp;gt;&lt;/code&gt;，然后重新打包，在多个 ePub 阅读器中做了测试，包括多看系统，都能正确显示目录。而且，我也使用 epubcheck 做了验证，没有错误。&lt;/p&gt;&lt;p&gt;如果你也在使用多看系统，阅读O’Reilly 出版社的电子书觉得没有目录不方便，可以按照下述方法修正：&lt;/p&gt;&lt;ol&gt; &lt;li&gt;使用解压缩软件解压 ePub 文件（可能要先把 ePub 文件的扩展名改为 &lt;code class="highlighter-rouge"&gt;.zip&lt;/code&gt;）;&lt;/li&gt; &lt;li&gt;打开解压得到的文件夹，在文本编辑器中打开 &lt;code class="highlighter-rouge"&gt;OEBPS&lt;/code&gt; 子文件夹中的 &lt;code class="highlighter-rouge"&gt;toc.ncx&lt;/code&gt; 文件；&lt;/li&gt; &lt;li&gt;在 &lt;code class="highlighter-rouge"&gt;head&lt;/code&gt; 元素中加上这个 &lt;code class="highlighter-rouge"&gt;meta&lt;/code&gt; 元素：&lt;code class="highlighter-rouge"&gt;&amp;lt;meta name="dtb:depth" content="1"/&amp;gt;&lt;/code&gt;；&lt;/li&gt; &lt;li&gt;最后，重新打包整个文件夹。&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;重新打包时要注意两个问题：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;一定要先打包 &lt;code class="highlighter-rouge"&gt;mimetype&lt;/code&gt; 这个文件；&lt;/li&gt; &lt;li&gt;而且，这个文件的压缩率必须为 0%。&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;如果你觉得每次都手动修正很麻烦，可以使用我写的 Rake 任务，如下所示。&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'fileutils'&lt;/span&gt;&lt;span class="c1"&gt;# Usage: rake duokanify file=path/to/sample.epub&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Adds dtb:depth to ncx file in an ePub'&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:duokanify&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ERROR: Please provide the ePub file path!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;end_with?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.epub'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ERROR: The file you provided is not an ePub!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ERROR: The file you provided is not exists!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Unzipping....'&lt;/span&gt; &lt;span class="n"&gt;dest_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.epub'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"unzip &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -d &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Normalize....'&lt;/span&gt; &lt;span class="n"&gt;ncx_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'OEBPS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'toc.ncx'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ncx_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Info: The ePub has no ncx file, needless to normalize.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;ncx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ncx_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt; &lt;span class="c1"&gt;# puts content.inspect&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/meta="dtb:depth"/i&lt;/span&gt; &lt;span class="nb"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Info: The ePub already set dtb:depth, needless to normalize.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;/head&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;meta name="dtb:depth" content="1"/&amp;gt;'&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rewind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;/head&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Rezipping....'&lt;/span&gt; &lt;span class="n"&gt;normalized_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-normalized.epub"&lt;/span&gt; &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"zip -0 -X &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;normalized_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mimetype"&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"zip -9 -r &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;normalized_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; META-INF OEBPS"&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cp&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalized_file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pwd&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Cleanning....'&lt;/span&gt; &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rm_rf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:secure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Done'&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Normalized ePub path: ./&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;normalized_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;p&gt;这个 Rake 任务的使用方法是：在命令行中执行 &lt;code class="highlighter-rouge"&gt;rake duokanify file=path/to/sample.epub&lt;/code&gt;。执行这个命令后会得到一个名为 &lt;code class="highlighter-rouge"&gt;sample-normalized.epub&lt;/code&gt; 的文件，然后再把这个文件上传到多看中即可。&lt;/p&gt;&lt;p&gt;水平有限，我的这个 Rake 任务写得比较蹩脚，如果你觉得有可以改进的地方（有很多），请访问&lt;a href="https://gist.github.com/AndorChen/8ebfc5821ceac8884416" title="这个 Gist"&gt;这个 Gist&lt;/a&gt;，给我留言。这个 Rake 任务的最新版会在这个 Gist 中更新。&lt;/p&gt; </description> <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/04/duokanify.html</link> <guid isPermaLink="true">http://about.ac/2015/04/duokanify.html</guid> <category>eBook</category> </item> <item><title>翻译流程</title> <description>&lt;p&gt;我翻译了&lt;a href="/books/" title="一些书"&gt;一些书&lt;/a&gt;，积累了一些经验。写这篇文章，给对翻译感兴趣、想从事翻译的人看一下，希望对新人有所帮助。其实，我也还是个“新人”。&lt;/p&gt;&lt;p&gt;我要说的是和出版社合作翻译，倘若你是和客户直接联系，自然不能用本文所述的“流程”。而且，这里所述的流程仅限部分出版社、部分图书类别（主要是计算机科学类）。&lt;/p&gt;&lt;h3&gt;找书&lt;/h3&gt;&lt;p&gt;国外的出版社很多，每年出版的书数量众多，国内会引进的却不多。国内从事计算机科学类图书引进的出版社（或旗下专门的公司）主要有：人邮信息技术分社，&lt;a href="http://www.ituring.com.cn/" title="图灵"&gt;图灵&lt;/a&gt;（人民邮电出版社），&lt;a href="http://www.broadview.com.cn/" title="博文视点"&gt;博文视点&lt;/a&gt;（电子工业出版社），&lt;a href="http://www.hzbook.com/" title="华章图文"&gt;华章图文&lt;/a&gt;（机械工业出版社）。&lt;/p&gt;&lt;p&gt;如果想寻找已经引进待译的书，可以访问各出版社或公司的网站，联系相应的编辑，看他们手头上有哪些书在“诚征译者”。&lt;/p&gt;&lt;p&gt;在这方面，我觉得图灵做得不错，&lt;a href="http://www.ituring.com.cn/minibook/921" title="所有待译的书都能在网站上找到"&gt;所有待译的书都能在网站上找到&lt;/a&gt;。&lt;/p&gt;&lt;h3&gt;调研&lt;/h3&gt;&lt;p&gt;找到“想”翻译的书后，你要做些调研，问自己几个问题，最终决定要不要翻译：&lt;/p&gt;&lt;ul&gt; &lt;li&gt;我对这本书所讲的内容（领域）是否熟悉（不一定要精通）？&lt;/li&gt; &lt;li&gt;这本书在原出版地的影响如何？亚马逊等网站上的评价如何？&lt;/li&gt; &lt;li&gt;我能为这本书投入多少时间？投入产出比是否令我满意？&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;关于最后一个问题，我可以给你提供一个参考。如果你是业余翻译，一般一天能翻译 3-5 页；出版社能支付你的翻译酬劳，一般是 ￥30-80 每千字。&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;当然，这些只是参考，不排除有超级赛亚人和资金雄厚的出版社。&lt;/p&gt;&lt;h3&gt;试译&lt;/h3&gt;&lt;p&gt;确定要翻译的书之后，联系出版社，索要试译章节，开始试译。试译内容的长度一般在 3 千字左右。出版社通过试译确认译者的翻译能力以及对书中所讲的知识是否了解。&lt;/p&gt;&lt;h3&gt;签合同&lt;/h3&gt;&lt;p&gt;试译通过后，出版社会和你签订“翻译委托协议”，确认翻译的具体细节，例如酬劳，交稿期限和方式等。&lt;/p&gt;&lt;h3&gt;翻译&lt;/h3&gt;&lt;p&gt;接下来就是“漫长而痛苦”的翻译了。你要制定一个计划，比如每天翻译多少页，确保在约定的交稿期限之前能翻译完。一般情况下，如果没按期译完，出版社会扣除一定的稿酬（在“翻译委托协议”中应有说明）。&lt;/p&gt;&lt;h3&gt;交稿，审核&lt;/h3&gt;&lt;p&gt;如果你挺过来了，完成了整本书的翻译，这时候该把译稿交给出版社审查了。&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;出版社的编辑会仔细认真地审核你的译稿，如果发现问题会及时和你联系，共同解决。这个过程可能很长，有时可能长达半年。&lt;/p&gt;&lt;h3&gt;等待&lt;/h3&gt;&lt;p&gt;出版社确认你的译稿没问题之后，会走些“内部流程”，比如排版、专家审读等。这个时候你只能等待，如果想继续翻译其他书，现在就可以回到第一步了。&lt;/p&gt;&lt;h3&gt;确认样书&lt;/h3&gt;&lt;p&gt;出版社的那些流程走完之后，应该会寄送你几本样书。收到样书后，你要再次确认。如果发现问题，及时向出版社反馈。&lt;/p&gt;&lt;h3&gt;出版&lt;/h3&gt;&lt;p&gt;一切都顺利完成了，现在书就出版了。接下来是铺天盖地的宣传期。&lt;/p&gt;&lt;div class="footnotes"&gt; &lt;ol&gt; &lt;li id="fn:1"&gt; &lt;p&gt;税前，起征额 ￥800。字数统计方式：一般以 Word 统计的字数为准。 &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li id="fn:2"&gt; &lt;p&gt;有时出版社会要求译者分批提交译稿，即每隔一段时间就要提交一次。具体的提交方式以“翻译委托协议”为准。 &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; </description> <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate><link>http://about.ac/2015/02/translation-process.html</link> <guid isPermaLink="true">http://about.ac/2015/02/translation-process.html</guid> <category>Translation</category> </item> <item><title>2014 年</title> <description>&lt;p&gt;每年着手写年终总结时，总会感叹时间过得好快。是啊，什么都没做，一年就过完了。小家伙也长大了。&lt;/p&gt;&lt;p&gt;这一年应该是我大学毕业五年来最“潦倒”也最快活的日子，尤其是下半年，无拘无束，不用看任何人脸色，不用被使唤来使唤去。正因为这样，虽然“潦倒”，但我一直拒绝再次进入“牢笼”。&lt;/p&gt;&lt;p&gt;4 月底，和领导做了次谈判，结果是双方对加班问题无法达成共识，我选择辞职。五一开始，正式成为“无业游民”。肆意妄为的玩了一个多月，巴西世界杯开始了。&lt;/p&gt;&lt;p&gt;5 月底到 6 月初，翻译《&lt;a href="http://about.ac/books/flask-web-development.html" title="Flask Web 开发"&gt;Flask Web 开发&lt;/a&gt;》。6 月底到 7 月底，翻译《&lt;a href="http://about.ac/books/python-network-programming-cookbook.html" title="Python 网络编程攻略"&gt;Python 网络编程攻略&lt;/a&gt;》。7 月底到 10 月中，翻译另一本 Python 相关的书（尚未出版）。11 月初到 12 月初，翻译《&lt;a href="railstutorial-china.org" title="Ruby on Rails 教程"&gt;Ruby on Rails 教程&lt;/a&gt;》（原书第 3 版）。12 月初，开始翻译一本 Java 相关的书，到今天已完成 40% 左右。&lt;/p&gt;&lt;p&gt;7 月底，为了提升码字的效率和“逼格”，买了把机械键盘（&lt;a href="http://www.filcochina.com/Products.asp?Bigclassname=ProductsJ&amp;amp;productname=FFKB67MCEB" title="Filco Minila 青轴"&gt;Filco Minila 青轴&lt;/a&gt;）。11 月初，为了升级到 Mavericks，把笔记本的 2x2G 内存换成了 2x8G。&lt;/p&gt;&lt;p&gt;7 月筹划翻译 Rails 教程第 3 版时，我决定弃用 Markdown，转用 &lt;a href="http://asciidoc.org/" title="AsciiDoc"&gt;AsciiDoc&lt;/a&gt;。所以开发了制作电子书的工具 &lt;a href="https://github.com/AndorChen/persie" title="persie"&gt;persie&lt;/a&gt;，放弃 &lt;a href="https://github.com/AndorChen/burr" title="burr"&gt;burr&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;这一年基本上都窝在屋里翻译。当我拿到第一本书的翻译费用时，比刚毕业拿到第一个月的工资还兴奋。虽然钱不多，但毕竟是自己一个字一个字码出来的。拿到实体书时，我傻乐了起来。这是自己的劳动成果，看得见摸得着。&lt;/p&gt;&lt;p&gt;至于来年的计划嘛，我从不做计划。&lt;/p&gt; </description> <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate><link>http://about.ac/2014/12/2014.html</link> <guid isPermaLink="true">http://about.ac/2014/12/2014.html</guid> <category>Life</category> </item> <item><title>升级到 Mavericks</title> <description>&lt;p&gt;最近把系统升级到了 Mavericks 10.9.5。观察了好久，最终评估我的电脑应该无法顺畅运行 Yosemite，所以决定安装前一代 OS X。&lt;/p&gt;&lt;p&gt;安装的过程尚算顺利，用时一个半小时左右。这一次我选择的是直接升级，不是全新安装。升级后应用都兼容（我安装的应用实在少的可怜），不过也遇到一些问题。&lt;/p&gt;&lt;h2&gt;内存&lt;/h2&gt;&lt;p&gt;不升级 10.10，最大的担忧就是内存不够。看样子，10.9 也很吃内存，开机后就用掉了 3GB。所以终决定升级内存，把 2x2GB 换成 2x8GB。事后证明这个决策是明智的，因为开 XCode 后内存用量超过了 9GB。&lt;/p&gt;&lt;p&gt;我用的是英睿达的内存条，按照英睿达的系统推荐，最终选定的型号是 CT102464BF160B。因为这个型号的频率是 1600MHz，而电脑原装的是 1333MHz，所以买之前有些犹豫。随后咨询了一些推友，大家的说法不一，不过我决定买回来试试。&lt;/p&gt;&lt;p&gt;装上之后系统能正确识别，目前来看没有什么问题。&lt;/p&gt;&lt;h2&gt;Git&lt;/h2&gt;&lt;p&gt;不知什么原因，升级后识别不了 brew 安装的 git，直接使用系统自带的版本。所以，重新使用 brew 安装了 git。&lt;/p&gt;&lt;p&gt;另外，bash prompt 中的 git 设置也失效了，所以&lt;a href="https://github.com/AndorChen/dotfiles/commit/179b51897ff8eaa454778e4191cd4821de17f9ca" title="升级了 dotfiles"&gt;升级了 dotfiles&lt;/a&gt;。顺便也把 git 的推送规则设为了 &lt;code class="highlighter-rouge"&gt;matching&lt;/code&gt;（&lt;a href="https://github.com/AndorChen/dotfiles/commit/d1af6aad079ccd953ef100eb4324cc7a0508d728" title="ref"&gt;ref&lt;/a&gt;）。&lt;/p&gt;&lt;h2&gt;Ruby&lt;/h2&gt;&lt;h3&gt;OpenSSL&lt;/h3&gt;&lt;p&gt;在使用 Ruby 的过程中遇到“Library not loaded: /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (LoadError)”错误，使用如下方法解决（&lt;a href="http://mithun.co/hacks/library-not-loaded-libcrypto-1-0-0-dylib-issue-in-mac/" title="via"&gt;via&lt;/a&gt;）：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c"&gt;# install openssl via brew&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;brew install openssl&lt;span class="c"&gt;# copy files&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/Cellar/openssl/1.0.1i/lib &lt;span class="o"&gt;[&lt;/span&gt;../1.0.1i/lib] &lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp libssl.1.0.0.dylib libcrypto.1.0.0.dylib /usr/lib/&lt;span class="c"&gt;# re-create symbolic links&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;../1.0.1i/lib] &lt;span class="nv"&gt;$ &lt;/span&gt;sudo rm libssl.dylib libcrypto.dylib &lt;span class="o"&gt;[&lt;/span&gt;../1.0.1i/lib] &lt;span class="nv"&gt;$ &lt;/span&gt;sudo ln -s libssl.1.0.0.dylib libssl.dylib &lt;span class="o"&gt;[&lt;/span&gt;../1.0.1i/lib] &lt;span class="nv"&gt;$ &lt;/span&gt;sudo ln -s libcrypto.1.0.0.dylib libcrypto.dylib &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;h3&gt;readline&lt;/h3&gt;&lt;p&gt;使用 Rails 的过程中遇到“Library not loaded: /usr/local/opt/readline/lib/libreadline.6.2.dylib”错误，使用如下方法解决（&lt;a href="http://qiita.com/hoisjp/items/61b5e016f51bc1ac8ed8" title="via"&gt;via&lt;/a&gt;）：&lt;/p&gt;&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="c"&gt;# uninstall old readline&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;brew uninstall readline&lt;span class="c"&gt;# re-install readline&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;brew install readline&lt;span class="c"&gt;# link dylibs&lt;/span&gt; &lt;span class="gp"&gt;$ &lt;/span&gt;brew link --force readline &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;</description> <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate><link>http://about.ac/2014/11/mavericks.html</link> <guid isPermaLink="true">http://about.ac/2014/11/mavericks.html</guid> <category>OS X</category> </item> </channel> </rss>